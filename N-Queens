import java.util.ArrayList;
import java.util.List;

public class NQueens {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> solutions = new ArrayList<>();
        char[][] board = new char[n][n];
        
        // Initializes the board with '.'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }
        
        solve(solutions, board, 0);
        return solutions;
    }
    
    private void solve(List<List<String>> solutions, char[][] board, int row) {
        if (row == board.length) {
            solutions.add(createBoard(board));
            return;
        }
        
        for (int col = 0; col < board.length; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q';
                solve(solutions, board, row + 1);
                board[row][col] = '.'; // Backtrack
            }
        }
    }
    
    private boolean isSafe(char[][] board, int row, int col) {
        // Check the column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        
        // Check the diagonal (top-left to bottom-right)
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        
        // Checks the diagonal (top-right to bottom-left)
        for (int i = row, j = col; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        
        return true;
    }
    
    private List<String> createBoard(char[][] board) {
        List<String> currentBoard = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            currentBoard.add(new String(board[i]));
        }
        return currentBoard;
    }

    public static void main(String[] args) {
        NQueens solution = new NQueens();
        List<List<String>> results = solution.solveNQueens(4);
        
        for (List<String> solutionBoard : results) {
            for (String row : solutionBoard) {
                System.out.println(row);
            }
            System.out.println();
        }
    }
}

This Java code solves the "N-Queens" problem, where the goal is to place `n` queens on an `n x n` chessboard so that no two queens can attack each other. 
The `solveNQueens` method initializes an `n x n` chessboard filled with dots (`.`) to represent empty spaces. It then uses a helper method, `solve`, to try placing queens row by row. 
For each row, it attempts to place a queen in each column, checking if the position is safe with the `isSafe` method. This method ensures the queen does not share the same column or diagonals with other queens. 
If a queen can be safely placed, the method moves to the next row, and if all queens are placed successfully, it adds this configuration to the list of solutions. The board's configurations are converted into a list of strings to represent the final solutions. 
Finally, in the `main` method, the code finds and prints all possible solutions for a 4x4 board, showing how the queens are arranged without any two threatening each other.
