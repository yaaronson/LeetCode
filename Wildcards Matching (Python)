def isMatch(s: str, p: str) -> bool:
    m, n = len(s), len(p)
    
    # dp[i][j] will be True if the first i characters in s match the first j characters in p
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    
    # Base case: empty pattern matches empty string
    dp[0][0] = True
    
    # Initialize the dp array for patterns starting with '*'
    for j in range(1, n + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 1]
    
    # Fill the dp array
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                # '*' can match zero or more characters
                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]
            elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:
                # '?' matches any single character, or exact character match
                dp[i][j] = dp[i - 1][j - 1]
    
    return dp[m][n]

Explnation: 
The problem is to check if a given string matches a pattern that includes wildcards. The wildcard * can match any sequence of characters (including none), while ? matches exactly one character. To solve this, we use a method called dynamic programming.

Imagine you have a table where each cell represents whether a part of the string matches a part of the pattern. You start by setting the cell that represents an empty string matching an empty pattern to True. Then, you fill in the table by checking if the current character in the pattern is *, ?, or a specific character. For *, you check if it matches zero characters or more characters. For ?, you check if it matches one character. Finally, you look at the bottom-right cell of the table to see if the whole string matches the whole pattern.

This method efficiently checks all possible matches by breaking the problem into smaller pieces and solving them step-by-step.
