public class Solution
{
    public int Trap(int[] height)
    {
        if (height == null || height.Length == 0)
            return 0;

        int n = height.Length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        int waterTrapped = 0;

        // Fills leftMax array
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++)
        {
            leftMax[i] = Math.Max(leftMax[i - 1], height[i]);
        }

        // Fill rightMax array
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--)
        {
            rightMax[i] = Math.Max(rightMax[i + 1], height[i]);
        }

        // Calculates water trapped
        for (int i = 0; i < n; i++)
        {
            waterTrapped += Math.Min(leftMax[i], rightMax[i]) - height[i];
        }

        return waterTrapped;
    }
}

Explanation: 
The "Trapping Rain Water" problem involves calculating the amount of water that can be trapped between bars of varying heights after rainfall. Each bar is represented by an array where its height is given, and the width between each bar is 1. To solve this, you need to determine how much water each bar can trap based on the tallest bars to its left and right. This is achieved by computing two arrays: one for the maximum height to the left of each bar and another for the maximum height to the right. For each bar, the trapped water is the difference between the minimum of these two maximum heights and the height of the bar itself. Summing up these differences for all bars gives the total amount of trapped water.
