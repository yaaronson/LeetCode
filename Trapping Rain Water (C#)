public class Solution
{
    public int Trap(int[] height)
    {
        if (height == null || height.Length == 0)
            return 0;

        int n = height.Length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        int waterTrapped = 0;

        // Fill leftMax array
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++)
        {
            leftMax[i] = Math.Max(leftMax[i - 1], height[i]);
        }

        // Fill rightMax array
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--)
        {
            rightMax[i] = Math.Max(rightMax[i + 1], height[i]);
        }

        // Calculates water trapped
        for (int i = 0; i < n; i++)
        {
            waterTrapped += Math.Min(leftMax[i], rightMax[i]) - height[i];
        }

        return waterTrapped;
    }
}
