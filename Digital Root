
public class SingleDigitSum {
    public static int singleDigitSum(int n) {
        // Handle the case when n is 0 (though n is always positive in this problem)
        if (n == 0) {
            return 0;
        }
                
        return 1 + (n - 1) % 9;
    }
    
    public static void main(String[] args) {
        // Example case
        System.out.println(singleDigitSum(38));  // Output: 2
    }
}


Explanation:

This Java code defines a class called `SingleDigitSum` with a method named `singleDigitSum` that calculates the single-digit sum of a positive integer. 
The single-digit sum is the result of repeatedly adding the digits of the number until only one digit remains. For example, for the number 38, you add 3 + 8 to get 11, and then add 1 + 1 to get 2. 
The method uses a formula to find this result directly: it calculates `1 + (n - 1) % 9`. 
This formula is based on a mathematical property that simplifies finding the single-digit sum. The `main` method shows an example where it prints the result of `singleDigitSum` for the number 38, which is 2.
