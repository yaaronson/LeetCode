import java.util.ArrayList;
import java.util.List;

public class WorkflowAutomationApp {

    // Task class to represent a task
    public static class Task {
        private String id;
        private String description;
        private String status; // e.g., "Pending", "In Progress", "Completed"

        public Task(String id, String description) {
            this.id = id;
            this.description = description;
            this.status = "Pending";
        }

        public String getId() {
            return id;
        }

        public String getDescription() {
            return description;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }

    // Workflow interface to define workflow operations
    public interface Workflow {
        void addTask(Task task);
        void processTasks();
        List<Task> getTasks();
    }

    // Concrete implementation of the Workflow
    public static class SimpleWorkflow implements Workflow {
        private List<Task> tasks;

        public SimpleWorkflow() {
            tasks = new ArrayList<>();
        }

        @Override
        public void addTask(Task task) {
            tasks.add(task);
            System.out.println("Added task: " + task.getDescription());
        }

        @Override
        public void processTasks() {
            for (Task task : tasks) {
                if (task.getStatus().equals("Pending")) {
                    task.setStatus("In Progress");
                    System.out.println("Processing task: " + task.getDescription());
                    // Simulate processing
                    task.setStatus("Completed");
                    System.out.println("Completed task: " + task.getDescription());
                }
            }
        }

        @Override
        public List<Task> getTasks() {
            return tasks;
        }
    }

    // Main method to run the application
    public static void main(String[] args) {
        SimpleWorkflow workflow = new SimpleWorkflow();

        // Adding tasks to the workflow
        workflow.addTask(new Task("1", "Design database schema"));
        workflow.addTask(new Task("2", "Implement REST API"));
        workflow.addTask(new Task("3", "Write unit tests"));

        // Processing tasks
        workflow.processTasks();

        // Displaying all tasks
        for (Task task : workflow.getTasks()) {
            System.out.println("Task ID: " + task.getId() + ", Description: " + task.getDescription() + ", Status: " + task.getStatus());
        }
    }
}

How To Run: 

To run this  program, Copy the provided code into a file named WorkflowAutomationApp.java. 
Next, you need to open a terminal or command prompt, go to the directory where the file is saved, and compile the program by executing the command javac WorkflowAutomationApp.java. 
Once the compilation is successful, you can run the program with the command java WorkflowAutomationApp.

When you run the program, you should see output like this: 


Added task: Design database schema
Added task: Implement REST API
Added task: Write unit tests
Processing task: Design database schema
Completed task: Design database schema
Processing task: Implement REST API
Completed task: Implement REST API
Processing task: Write unit tests
Completed task: Write unit tests
Task ID: 1, Description: Design database schema, Status: Completed
Task ID: 2, Description: Implement REST API, Status: Completed
Task ID: 3, Description: Write unit tests, Status: Completed

This output demonstrates the basic functionality of adding tasks, processing them, and displaying their statuses. 
