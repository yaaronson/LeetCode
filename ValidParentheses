import java.util.Stack;

public class ValidParentheses {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c); // Push open brackets onto the stack
            } else {
                if (stack.isEmpty()) {
                    return false; // If stack is empty and we encounter a closing bracket, it's invalid
                }
                char top = stack.pop();
                if ((c == ')' && top != '(') || 
                    (c == '}' && top != '{') || 
                    (c == ']' && top != '[')) {
                    return false; // If the closing bracket doesn't match the last open bracket
                }
            }
        }
        
        return stack.isEmpty(); // Valid if no unmatched open brackets are left in the stack
    }

    public static void main(String[] args) {
        ValidParentheses solution = new ValidParentheses();
        
        // Test cases
        System.out.println(solution.isValid("()[]{}")); // true
        System.out.println(solution.isValid("([)]"));   // false
        System.out.println(solution.isValid("{[]}"));   // true
    }
}

Explnation: 
This code checks if a string containing different types of brackets is balanced. It uses a stack to keep track of open brackets. As it goes over each character in the string:

- When it finds  an open bracket (like `(`, `{`, or `[`), it adds it to the stack
- When it finds a closing bracket (like `)`, `}`, or `]`), it checks if there’s an open bracket available in the stack to match it. If the stack is empty or the top bracket doesn’t match, the string is considered invalid.
- After processing the entire string, if there are any leftover open brackets in the stack, the string is invalid. If the stack is empty, it means all brackets matched properly, so the string is valid.

The `main` method demonstrates this by testing the program with different strings to see which are valid or invalid.
