import java.util.Stack;

public class ValidParentheses {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c); // Push open brackets onto the stack
            } else {
                if (stack.isEmpty()) {
                    return false; // If stack is empty and we encounter a closing bracket, it's invalid
                }
                char top = stack.pop();
                if ((c == ')' && top != '(') || 
                    (c == '}' && top != '{') || 
                    (c == ']' && top != '[')) {
                    return false; // If the closing bracket doesn't match the last open bracket
                }
            }
        }
        
        return stack.isEmpty(); // Valid if no unmatched open brackets are left in the stack
    }

    public static void main(String[] args) {
        ValidParentheses solution = new ValidParentheses();
        
        // Test cases
        System.out.println(solution.isValid("()[]{}")); // true
        System.out.println(solution.isValid("([)]"));   // false
        System.out.println(solution.isValid("{[]}"));   // true
    }
}
