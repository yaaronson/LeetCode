import java.util.HashMap;

import java.util.Map;


public class LongestSubstringWithoutRepeatingCharacters {

    public int lengthOfLongestSubstring(String s) {

        Map<Character, Integer> charIndexMap = new HashMap<>();

        int maxLength = 0;

        int start = 0;
        
        for (int end = 0; end < s.length(); end++) {
            char currentChar = s.charAt(end);
            
            if (charIndexMap.containsKey(currentChar)) {
                // Move the start to the right of the previous position of currentChar
                start = Math.max(start, charIndexMap.get(currentChar) + 1);
            }
            
            // Update the last seen position 

            charIndexMap.put(currentChar, end);
            
            // Calculate the length of the current substring
            maxLength = Math.max(maxLength, end - start + 1);
        }
        
        return maxLength;
    }


    public static void main(String[] args) {
        LongestSubstringWithoutRepeatingCharacters solution = new LongestSubstringWithoutRepeatingCharacters();
        
        // Test cases

        System.out.println(solution.lengthOfLongestSubstring("abcabcbb")); // Output: 3
        System.out.println(solution.lengthOfLongestSubstring("bbbbb"));    // Output: 1
        System.out.println(solution.lengthOfLongestSubstring("pwwkew"));   // Output: 3
    }
}
