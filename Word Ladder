import java.util.*;

public class WordLadder {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) {
            return 0;
        }

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int level = 1;

        while (!queue.isEmpty()) {
            int levelSize = queue.size();

            for (int i = 0; i < levelSize; i++) {
                String currentWord = queue.poll();
                char[] wordChars = currentWord.toCharArray();

                for (int j = 0; j < wordChars.length; j++) {
                    char originalChar = wordChars[j];

                    for (char c = 'a'; c <= 'z'; c++) {
                        wordChars[j] = c;
                        String transformedWord = new String(wordChars);

                        if (transformedWord.equals(endWord)) {
                            return level + 1;
                        }

                        if (wordSet.contains(transformedWord)) {
                            queue.offer(transformedWord);
                            wordSet.remove(transformedWord);
                        }
                    }
                    wordChars[j] = originalChar;
                }
            }
            level++;
        }
        return 0;
    }

    public static void main(String[] args) {
        WordLadder solution = new WordLadder();

        // Test cases
        List<String> wordList1 = Arrays.asList("hot", "dot", "dog", "lot", "log", "cog");
        List<String> wordList2 = Arrays.asList("hot", "dot", "dog", "lot", "log");

        System.out.println("Shortest transformation length: " + solution.ladderLength("hit", "cog", wordList1)); // Output: 5
        System.out.println("Shortest transformation length: " + solution.ladderLength("hit", "cog", wordList2)); // Output: 0
    }
}

The `WordLadder` class is a solution for finding the shortest sequence of transformations from a starting word to a target word. 
In this problem, you can only change one letter at a time, and each intermediate word must be a valid entry from a provided list.

Here's how it works: The method `ladderLength` first checks if the target word is in the word list. 
If it isn’t, the function immediately returns 0, indicating that no transformation is possible. The algorithm uses a breadth-first search approach, starting from the initial word and exploring all possible single-letter changes. Each new word is checked to see if it matches the target word. If a match is found, the function returns the length of the transformation sequence. If not, the method continues exploring, adding each valid new word to a queue for further examination, and removing it from the list to avoid revisiting. If the queue is exhausted without finding the target, the function concludes that a transformation sequence doesn’t exist.
