import java.util.*;


public class ShortestPathInGrid {
    static class Cell {
        int row, col, cost;
        Cell(int row, int col, int cost) {
            this.row = row;
            this.col = col;
            this.cost = cost;
        }
    }

    public int shortestPath(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        // Min-heap priority queue to store the cells to be processed

        PriorityQueue<Cell> pq = new PriorityQueue<>(Comparator.comparingInt(cell -> cell.cost));
        pq.offer(new Cell(0, 0, grid[0][0]));
        
        boolean[][] visited = new boolean[m][n];
        visited[0][0] = true;
        
        while (!pq.isEmpty()) {
            Cell current = pq.poll();
            int row = current.row;
            int col = current.col;
            int cost = current.cost;
            
            // If we have reached the bottom-right corner
            if (row == m - 1 && col == n - 1) {
                return cost;
            }
            
            for (int[] direction : directions) {
                int newRow = row + direction[0];
                int newCol = col + direction[1];
                
                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && !visited[newRow][newCol] && grid[newRow][newCol] != -1) {
                    visited[newRow][newCol] = true;
                    pq.offer(new Cell(newRow, newCol, cost + grid[newRow][newCol]));
                }
            }
        }
        
        return -1;
    }

    public static void main(String[] args) {
        ShortestPathInGrid solution = new ShortestPathInGrid();
        int[][] grid = {
            {1, 3, 1},
            {1, -1, 1},
            {4, 2, 1}
        };
        int result = solution.shortestPath(grid);
        System.out.println("Shortest path cost: " + result);  // Output: 8
    }
}

Explanation:
The ShortestPathInGrid Java code finds the shortest path through a grid where each cell has a cost, and some cells might be blocked. 
It uses a priority queue to explore the grid, starting from the top-left corner and aiming to reach the bottom-right corner with the minimal cost. 
The priority queue ensures that cells with the lowest accumulated cost are processed first. 
The code checks all possible directions (right, down, left, up) to move from the current cell, 
updates the cost if moving to a neighboring cell results in a lower total cost, and marks cells as visited to avoid revisits. If it reaches the target cell, 
it returns the total cost; if no path exists, it returns -1
